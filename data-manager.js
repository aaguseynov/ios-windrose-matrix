/**
 * Data Manager
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ü–µ–Ω–æ–∫
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
 */

class DataManager {
    constructor() {
        this.currentData = null;
        this.competencies = [
            { key: 'design', name: '–î–∏–∑–∞–π–Ω' },
            { key: 'ios', name: 'iOS —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' },
            { key: 'threading', name: '–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å' },
            { key: 'di', name: 'Dependency Injection' },
            { key: 'testing', name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' },
            { key: 'tools', name: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏' },
            { key: 'product', name: '–ü—Ä–æ–¥—É–∫—Ç' },
            { key: 'autonomy', name: '–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å' },
            { key: 'quality', name: '–ö–∞—á–µ—Å—Ç–≤–æ' },
            { key: 'teamwork', name: '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞' }
        ];
        this.levels = ['level_0', 'level_1', 'level_2', 'level_3'];
        this.developers = [
            { key: 'artem', name: '–ê—Ä—Ç–µ–º –ë—Ä–∞–≥–∏–Ω' },
            { key: 'denis', name: '–î–µ–Ω–∏—Å –í–∞–ª—å—â–∏–∫–æ–≤' },
            { key: 'anar', name: '–ê–Ω–∞—Ä –ì—É—Å–µ–π–Ω–æ–≤' }
        ];
        
        // Callbacks
        this.onDataChanged = null;
        this.onDataLoaded = null;
        this.onDataSaved = null;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
     */
    createNewData(developerKey) {
        const developer = this.developers.find(d => d.key === developerKey);
        if (!developer) {
            throw new Error(`–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ${developerKey} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        
        const data = {
            developer: developerKey,
            developerName: developer.name,
            date: new Date().toISOString(),
            competencies: {}
        };
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
        this.competencies.forEach(comp => {
            data.competencies[comp.key] = {
                name: comp.name,
                levels: {}
            };
            
            this.levels.forEach(level => {
                data.competencies[comp.key].levels[level] = {
                    selfEvaluation: 0,
                    managerEvaluation: 0,
                    comments: ''
                };
            });
        });
        
        this.currentData = data;
        this.notifyDataChanged();
        
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:', developer.name);
        return data;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
     */
    loadFromFile(fileData) {
        try {
            console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞:', fileData);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if (!this.validateDataStructure(fileData)) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ');
            }
            
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É)
            const normalizedData = this.normalizeData(fileData);
            
            this.currentData = normalizedData;
            this.notifyDataLoaded(normalizedData);
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞');
            return normalizedData;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
     */
    validateDataStructure(data) {
        if (!data || typeof data !== 'object') {
            console.error('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º');
            return false;
        }
        
        if (!data.developer || typeof data.developer !== 'string') {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ developer');
            return false;
        }
        
        if (!data.competencies || typeof data.competencies !== 'object') {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ competencies');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
        const hasValidCompetencies = this.competencies.some(comp => 
            data.competencies[comp.key] && 
            typeof data.competencies[comp.key] === 'object'
        );
        
        if (!hasValidCompetencies) {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏');
            return false;
        }
        
        return true;
    }
    
    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É)
     */
    normalizeData(data) {
        console.log('üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:', data);
        console.log('üîÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ competencies –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', data.competencies);
        console.log('üîÑ –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:', this.competencies.map(c => c.key));
        console.log('üîÑ –û–∂–∏–¥–∞–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏:', this.levels);
        
        const normalized = {
            developer: data.developer,
            evaluator: data.evaluator || '–°–∏—Å—Ç–µ–º–∞',
            developerName: this.getDeveloperName(data.developer),
            date: data.date || new Date().toISOString(),
            status: data.status || 'completed',
            competencies: {}
        };
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
        this.competencies.forEach(comp => {
            const compData = data.competencies[comp.key];
            
            if (compData) {
                console.log(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é ${comp.key}:`, compData);
                
                normalized.competencies[comp.key] = {
                    name: comp.name,
                    levels: {}
                };
                
                this.levels.forEach(level => {
                    const levelData = compData[level];
                    
                    if (levelData) {
                        normalized.competencies[comp.key].levels[level] = {
                            selfEvaluation: Number(levelData.selfEvaluation) || 0,
                            managerEvaluation: Number(levelData.managerEvaluation) || 0,
                            comments: String(levelData.comments || '')
                        };
                        
                        console.log(`  ‚úÖ ${level}: self=${levelData.selfEvaluation}, manager=${levelData.managerEvaluation}`);
                    } else {
                        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
                        normalized.competencies[comp.key].levels[level] = {
                            selfEvaluation: 0,
                            managerEvaluation: 0,
                            comments: ''
                        };
                        
                        console.log(`  ‚ö†Ô∏è ${level}: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞`);
                    }
                });
            } else {
                console.log(`‚ö†Ô∏è –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è ${comp.key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É`);
                
                // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
                normalized.competencies[comp.key] = {
                    name: comp.name,
                    levels: {}
                };
                
                this.levels.forEach(level => {
                    normalized.competencies[comp.key].levels[level] = {
                        selfEvaluation: 0,
                        managerEvaluation: 0,
                        comments: ''
                    };
                });
            }
        });
        
        console.log('‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', normalized);
        return normalized;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
     */
    updateEvaluation(competencyKey, levelKey, type, value) {
        if (!this.currentData) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            return;
        }
        
        const comp = this.currentData.competencies[competencyKey];
        if (!comp || !comp.levels[levelKey]) {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è –∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å:', competencyKey, levelKey);
            return;
        }
        
        const level = comp.levels[levelKey];
        
        switch (type) {
            case 'self':
                level.selfEvaluation = Number(value) || 0;
                break;
            case 'manager':
                level.managerEvaluation = Number(value) || 0;
                break;
            case 'comments':
                level.comments = String(value || '');
                break;
            default:
                console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ü–µ–Ω–∫–∏:', type);
                return;
        }
        
        this.notifyDataChanged();
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${competencyKey}.${levelKey}.${type}:`, value);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
     */
    getEvaluation(competencyKey, levelKey, type) {
        if (!this.currentData) {
            return this.getDefaultValue(type);
        }
        
        const comp = this.currentData.competencies[competencyKey];
        if (!comp || !comp.levels[levelKey]) {
            return this.getDefaultValue(type);
        }
        
        const level = comp.levels[levelKey];
        
        switch (type) {
            case 'self':
                return level.selfEvaluation || 0;
            case 'manager':
                return level.managerEvaluation || 0;
            case 'comments':
                return level.comments || '';
            default:
                return this.getDefaultValue(type);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultValue(type) {
        switch (type) {
            case 'self':
            case 'manager':
                return 0;
            case 'comments':
                return '';
            default:
                return 0;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    getCurrentData() {
        return this.currentData;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    getDataForSave() {
        if (!this.currentData) {
            throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–µ–∞–ª—å–Ω–æ–º—É JSON
        const saveData = {
            developer: this.currentData.developer,
            evaluator: this.currentData.evaluator || '–°–∏—Å—Ç–µ–º–∞',
            date: this.currentData.date,
            status: this.currentData.status || "completed",
            competencies: {}
        };
        
        Object.keys(this.currentData.competencies).forEach(compKey => {
            saveData.competencies[compKey] = {};
            
            Object.keys(this.currentData.competencies[compKey].levels).forEach(levelKey => {
                const level = this.currentData.competencies[compKey].levels[levelKey];
                saveData.competencies[compKey][levelKey] = {
                    selfEvaluation: level.selfEvaluation,
                    managerEvaluation: level.managerEvaluation,
                    comments: level.comments
                };
            });
        });
        
        return saveData;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
     */
    getDeveloperName(developerKey) {
        const developer = this.developers.find(d => d.key === developerKey);
        return developer ? developer.name : developerKey;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞–Ω–Ω—ã–º
     */
    getStatistics() {
        if (!this.currentData) {
            return null;
        }
        
        let totalEvaluations = 0;
        let completedEvaluations = 0;
        let averageScore = 0;
        let totalScore = 0;
        
        Object.keys(this.currentData.competencies).forEach(compKey => {
            const comp = this.currentData.competencies[compKey];
            
            Object.keys(comp.levels).forEach(levelKey => {
                const level = comp.levels[levelKey];
                
                // –°—á–∏—Ç–∞–µ–º —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É
                if (level.selfEvaluation > 0) {
                    totalScore += level.selfEvaluation;
                    completedEvaluations++;
                }
                totalEvaluations++;
                
                // –°—á–∏—Ç–∞–µ–º –æ—Ü–µ–Ω–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                if (level.managerEvaluation > 0) {
                    totalScore += level.managerEvaluation;
                    completedEvaluations++;
                }
                totalEvaluations++;
            });
        });
        
        if (completedEvaluations > 0) {
            averageScore = totalScore / completedEvaluations;
        }
        
        return {
            totalEvaluations,
            completedEvaluations,
            completionPercentage: totalEvaluations > 0 ? (completedEvaluations / totalEvaluations) * 100 : 0,
            averageScore: Math.round(averageScore * 100) / 100
        };
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    notifyDataChanged() {
        if (this.onDataChanged) {
            this.onDataChanged(this.currentData);
        }
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
     */
    notifyDataLoaded(data) {
        if (this.onDataLoaded) {
            this.onDataLoaded(data);
        }
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    notifyDataSaved(data) {
        if (this.onDataSaved) {
            this.onDataSaved(data);
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    clearData() {
        this.currentData = null;
        this.notifyDataChanged();
        console.log('üóëÔ∏è –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.dataManager = new DataManager();
