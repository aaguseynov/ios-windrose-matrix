/**
 * Google Authentication Module
 * –ú–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google
 */

/**
 * Google Authentication Class
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Identity Services
 */
class GoogleAuth {
    constructor(config) {
        this.config = config;
        this.clientId = config.clientId;
        this.isSignedIn = false;
        this.user = null;
        this.accessToken = null;
        this.credential = null;
        this.isInitialized = false;
        
        // Callbacks
        this.onAuthSuccess = null;
        this.onAuthError = null;
        this.onSignOut = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Identity Services
     */
    async initialize() {
        try {
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Identity Services...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Client ID
            if (!this.clientId || this.clientId.includes('CLIENT_ID_PLACEHOLDER') || this.clientId.includes('YOUR_CLIENT_ID_HERE')) {
                throw new Error('Client ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ env-vars.js –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º Google Identity Services
            await this.loadGoogleIdentityServices();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Identity Services
            await this.initGoogleIdentityServices();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            await this.checkExistingAuth();
            
            this.isInitialized = true;
            console.log('‚úÖ Google Identity Services –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Identity Services:', error);
            return false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ Google Identity Services
     */
    async loadGoogleIdentityServices() {
        return new Promise((resolve, reject) => {
            if (window.google && window.google.accounts) {
                console.log('‚úÖ Google Identity Services —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                resolve();
                return;
            }

            console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ Google Identity Services...');
            const script = document.createElement('script');
            script.src = 'https://accounts.google.com/gsi/client';
            script.onload = () => {
                console.log('‚úÖ Google Identity Services –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                resolve();
            };
            script.onerror = () => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Google Identity Services');
                reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Google Identity Services'));
            };
            document.head.appendChild(script);
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Identity Services
     */
    async initGoogleIdentityServices() {
        return new Promise((resolve, reject) => {
            try {
                console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Identity Services...');
                
                window.google.accounts.id.initialize({
                    client_id: this.clientId,
                    callback: (response) => this.handleCredentialResponse(response),
                    auto_select: false,
                    cancel_on_tap_outside: true
                });
                
                console.log('‚úÖ Google Identity Services –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
                resolve();
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Identity Services:', error);
                reject(error);
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async handleCredentialResponse(response) {
        try {
            console.log('üîë –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            
            if (!response.credential) {
                throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω credential');
            }
            
            this.credential = response.credential;
            this.isSignedIn = true;
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            const payload = this.decodeJWT(response.credential);
            this.user = payload;
            
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', payload.name);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Google Drive API
            await this.getAccessTokenForDrive();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage –ü–û–°–õ–ï –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            this.saveAuthState();
            
            // –í—ã–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            this.handleAuthSuccess();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            this.handleAuthError(error.message);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Google Drive API
     */
    async getAccessTokenForDrive() {
        try {
            console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Google Drive API...');
            
            // –î–ª—è Google Identity Services –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Google Token API
            // —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è access token
            const tokenResponse = await this.getTokenFromGoogleIdentityServices();
            
            if (tokenResponse && tokenResponse.access_token) {
                this.accessToken = tokenResponse.access_token;
                console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—É—á–µ–Ω –¥–ª—è Google Drive API');
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Google Identity Services
     */
    async getTokenFromGoogleIdentityServices() {
        return new Promise((resolve, reject) => {
            try {
                const tokenClient = window.google.accounts.oauth2.initTokenClient({
                    client_id: this.clientId,
                    scope: 'https://www.googleapis.com/auth/drive.file',
                    callback: (response) => {
                        if (response.access_token) {
                            console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Google Identity Services');
                            resolve(response);
                        } else {
                            console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω');
                            reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞'));
                        }
                    }
                });
                
                tokenClient.requestAccessToken();
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞:', error);
                reject(error);
            }
        });
    }

    /**
     * –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
     */
    decodeJWT(token) {
        try {
            const base64Url = token.split('.')[1];
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));
            
            return JSON.parse(jsonPayload);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT:', error);
            return null;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    handleAuthSuccess() {
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        this.closeGoogleAuthPopup();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.saveAuthState();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (this.onAuthSuccess) {
            this.onAuthSuccess(this.user);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    handleAuthError(message) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', message);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∫—Ä–æ–º–µ –æ—Ç–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
        if (!message.includes('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª') && !message.includes('popup_closed_by_user')) {
            this.closeGoogleAuthPopup();
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
        if (this.onAuthError) {
            this.onAuthError(message);
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google
     */
    closeGoogleAuthPopup() {
        try {
            if (window.google && window.google.accounts && window.google.accounts.id) {
                window.google.accounts.id.cancel();
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const signInContainer = document.getElementById('google-signin-container');
            if (signInContainer) {
                signInContainer.style.display = 'none';
                signInContainer.innerHTML = '';
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ localStorage
     */
    saveAuthState() {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            let userData = null;
            if (this.user) {
                if (this.user.getBasicProfile) {
                    const profile = this.user.getBasicProfile();
                    userData = {
                        id: this.user.id || profile.getId(),
                        name: profile.getName(),
                        email: profile.getEmail(),
                        imageUrl: profile.getImageUrl(),
                        type: 'google_profile'
                    };
                } else if (this.user.name) {
                    userData = {
                        id: this.user.id,
                        name: this.user.name,
                        email: this.user.email,
                        imageUrl: this.user.picture,
                        type: 'user_object'
                    };
                }
            }

            const authState = {
                isSignedIn: this.isSignedIn,
                user: userData,
                accessToken: this.accessToken,
                credential: this.credential,
                timestamp: Date.now()
            };
            
            localStorage.setItem('google_auth_state', JSON.stringify(authState));
            console.log('üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', authState);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ localStorage
     */
    restoreAuthState() {
        try {
            const authStateStr = localStorage.getItem('google_auth_state');
            if (!authStateStr) {
                return false;
            }

            const authState = JSON.parse(authStateStr);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω (24 —á–∞—Å–∞)
            const tokenAge = Date.now() - authState.timestamp;
            const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
            
            if (tokenAge > maxAge) {
                console.log('‚è∞ –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
                this.clearAuthState();
                return false;
            }

            this.isSignedIn = authState.isSignedIn;
            this.user = authState.user; // –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            this.accessToken = authState.accessToken;
            this.credential = authState.credential;
            
            console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', {
                isSignedIn: this.isSignedIn,
                hasUser: !!this.user,
                hasToken: !!this.accessToken,
                hasCredential: !!this.credential
            });
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
            this.clearAuthState();
            return false;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    clearAuthState() {
        this.isSignedIn = false;
        this.user = null;
        this.accessToken = null;
        this.credential = null;
        localStorage.removeItem('google_auth_state');
        console.log('üóëÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω–æ');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async checkExistingAuth() {
        if (this.restoreAuthState()) {
            console.log('üë§ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            
            // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ–π –∏ –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–∞
            if (this.accessToken) {
                console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                this.isSignedIn = true;
                return true;
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            try {
                if (this.accessToken) {
                    const response = await fetch('https://www.googleapis.com/oauth2/v1/userinfo?access_token=' + this.accessToken);
                    if (response.ok) {
                        console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
                        this.isSignedIn = true;
                        return true;
                    } else {
                        console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
                        this.clearAuthState();
                        this.isSignedIn = false;
                        this.user = null;
                        this.accessToken = null;
                        this.credential = null;
                    }
                }
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å');
                // –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏
                this.isSignedIn = true;
                return true;
            }
        }
        return false;
    }

    /**
     * –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
     */
    async signIn() {
        try {
            if (!this.isInitialized) {
                throw new Error('Google Auth –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            console.log('üîê –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const signInContainer = document.getElementById('google-signin-container');
            if (signInContainer) {
                signInContainer.style.display = 'block';
            }
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            this.createSignInButton();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            window.google.accounts.id.prompt();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:', error);
            this.handleAuthError(error.message);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google
     */
    createSignInButton() {
        const signInContainer = document.getElementById('google-signin-container');
        if (!signInContainer) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        try {
            window.google.accounts.id.renderButton(signInContainer, {
                theme: 'outline',
                size: 'large',
                text: 'signin_with',
                shape: 'rectangular',
                logo_alignment: 'left'
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    signOut() {
        try {
            console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.clearAuthState();
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            this.closeGoogleAuthPopup();
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—ã—Ö–æ–¥–µ
            if (this.onSignOut) {
                this.onSignOut();
            }
            
            console.log('‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
     */
    getAccessToken() {
        if (!this.isSignedIn || !this.accessToken) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        }
        return this.accessToken;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUser() {
        return this.user;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserName() {
        if (this.user) {
            if (this.user.getBasicProfile) {
                return this.user.getBasicProfile().getName();
            } else if (this.user.name) {
                return this.user.name;
            }
        }
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º GoogleAuth –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
class AuthService {
    constructor() {
        this.auth = null;
        this.isInitialized = false;
        this.initializationPromise = null;
        
        // Callbacks
        this._authSuccessCallbacks = [];
        this._authErrorCallbacks = [];
        this._signOutCallbacks = [];
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async initialize(config) {
        if (this.isInitialized) {
            console.log('‚úÖ AuthService —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return true;
        }

        if (this.initializationPromise) {
            console.log('‚è≥ AuthService —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
            return await this.initializationPromise;
        }

        this.initializationPromise = this._doInitialize(config);
        const result = await this.initializationPromise;
        this.isInitialized = true;
        return result;
    }

    async _doInitialize(config) {
        try {
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ AuthService...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ waitForEnvVars
            if (typeof waitForEnvVars === 'function') {
                // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ env-vars.js
                await waitForEnvVars();
            } else {
                console.warn('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è waitForEnvVars –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if (!config || !config.clientId) {
                throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ Client ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            }
            
            if (config.clientId.includes('CLIENT_ID_PLACEHOLDER') || config.clientId.includes('YOUR_CLIENT_ID_HERE')) {
                throw new Error('Client ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ env-vars.js –∏ config.js');
            }
            
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞, Client ID:', config.clientId.substring(0, 20) + '...');
            
            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä GoogleAuth
            this.auth = new GoogleAuth(config);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ callbacks
            this.auth.onAuthSuccess = (user) => {
                console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', user);
                this._notifyAuthSuccess(user);
            };
            
            this.auth.onAuthError = (message) => {
                console.error('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', message);
                this._notifyAuthError(message);
            };
            
            this.auth.onSignOut = () => {
                console.log('üëã –ì–ª–æ–±–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
                this._notifySignOut();
            };
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Auth
            const success = await this.auth.initialize();
            if (success) {
                console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π AuthService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                return true;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Auth');
                return false;
            }
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthService:', error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä GoogleAuth
     */
    getAuth() {
        if (!this.isInitialized) {
            throw new Error('AuthService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
        }
        return this.auth;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    isSignedIn() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º auth
        if (this.auth && this.auth.isSignedIn) {
            return true;
        }
        
        // –ï—Å–ª–∏ auth –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
        try {
            const authStateStr = localStorage.getItem('google_auth_state');
            if (authStateStr) {
                const authState = JSON.parse(authStateStr);
                if (authState.isSignedIn && authState.accessToken) {
                    console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ localStorage');
                    return true;
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage:', error);
        }
        
        return false;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUser() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ auth
        if (this.auth && this.auth.user) {
            return this.auth.user;
        }
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ auth, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
        try {
            const authStateStr = localStorage.getItem('google_auth_state');
            if (authStateStr) {
                const authState = JSON.parse(authStateStr);
                if (authState.user) {
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ localStorage');
                    return authState.user;
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', error);
        }
        
        return null;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserName() {
        const user = this.getUser();
        if (user) {
            if (user.getBasicProfile) {
                return user.getBasicProfile().getName();
            } else if (user.name) {
                return user.name;
            }
        }
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
     */
    getAccessToken() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ auth
        if (this.auth && this.auth.accessToken) {
            return this.auth.accessToken;
        }
        
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –≤ auth, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
        try {
            const authStateStr = localStorage.getItem('google_auth_state');
            if (authStateStr) {
                const authState = JSON.parse(authStateStr);
                if (authState.accessToken) {
                    console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ localStorage');
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ auth –¥–ª—è –±—É–¥—É—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤
                    if (this.auth) {
                        this.auth.accessToken = authState.accessToken;
                    }
                    return authState.accessToken;
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage:', error);
        }
        
        return null;
    }

    /**
     * –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
     */
    async signIn() {
        if (!this.isInitialized) {
            throw new Error('AuthService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        return await this.auth.signIn();
    }

    /**
     * –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    signOut() {
        if (!this.isInitialized) {
            throw new Error('AuthService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        this.auth.signOut();
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
     */
    onAuthSuccess(callback) {
        this._authSuccessCallbacks.push(callback);
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    onAuthError(callback) {
        this._authErrorCallbacks.push(callback);
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    onSignOut(callback) {
        this._signOutCallbacks.push(callback);
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –æ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    _notifyAuthSuccess(user) {
        this._authSuccessCallbacks.forEach(callback => {
            try {
                callback(user);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ callback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            }
        });
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    _notifyAuthError(message) {
        this._authErrorCallbacks.forEach(callback => {
            try {
                callback(message);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ callback –æ—à–∏–±–∫–∏:', error);
            }
        });
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –æ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    _notifySignOut() {
        this._signOutCallbacks.forEach(callback => {
            try {
                callback();
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ callback –≤—ã—Ö–æ–¥–∞:', error);
            }
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è waitForEnvVars –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ config.js

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AuthService
window.authService = new AuthService();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { GoogleAuth, AuthService };
}
