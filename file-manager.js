/**
 * File Manager UI Component
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ Google Drive
 */

class FileManager {
    constructor(auth, drive) {
        this.auth = auth;
        this.drive = drive;
        this.selectedFiles = [];
        this.currentFiles = [];
        
        // Callbacks
        this.onFilesSelected = null;
        this.onFileLoaded = null;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    isAuthorized() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π AuthService
        if (window.authService && window.authService.isSignedIn()) {
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π auth (–º–æ–∂–µ—Ç –±—ã—Ç—å AuthService)
        if (this.auth && this.auth.isSignedIn && this.auth.isSignedIn()) {
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç auth
        if (this.auth && this.auth.isSignedIn && this.auth.accessToken) {
            return true;
        }
        
        return false;
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É FileManager –∏ GoogleDrive
     */
    diagnoseConflicts() {
        console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ FileManager –∏ GoogleDrive...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GoogleDrive
        if (!this.drive) {
            console.error('‚ùå GoogleDrive –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã GoogleDrive
        const requiredMethods = ['getFiles', 'downloadFile', 'getFileInfo', 'getFilesFromFolder', 'showNotification'];
        const missingMethods = [];
        
        requiredMethods.forEach(method => {
            if (typeof this.drive[method] !== 'function') {
                missingMethods.push(method);
            }
        });
        
        if (missingMethods.length > 0) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–æ–¥—ã GoogleDrive:', missingMethods);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const config = window.config || globalThis.config;
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
        console.log('  - window.config:', !!window.config);
        console.log('  - globalThis.config:', !!globalThis.config);
        console.log('  - config:', !!config);
        console.log('  - typeof config:', typeof config);
        console.log('  - config === null:', config === null);
        console.log('  - config === undefined:', config === undefined);
        
        if (config) {
            console.log('  - config.drive:', !!config.drive);
            console.log('  - config.drive.folderId:', config.drive?.folderId);
        }
        
        if (!config || !config.drive || !config.drive.folderId) {
            console.error('‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GoogleDrive –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:', Object.keys(window).filter(k => k.includes('config') || k.includes('Config')));
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if (config) {
                console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ config:', Object.keys(config));
                if (config.drive) {
                    console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ config.drive:', Object.keys(config.drive));
                } else {
                    console.log('‚ùå config.drive –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                }
            } else {
                console.log('‚ùå config –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            }
            
            return false;
        }
        
        console.log('‚úÖ GoogleDrive –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log('üìÅ ID –ø–∞–ø–∫–∏:', config.drive.folderId);
        console.log('üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:', Object.getOwnPropertyNames(Object.getPrototypeOf(this.drive)));
        
        return true;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
     */
    async showFileSelector(options = {}) {
        try {
            console.log('üìÅ –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤...');
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            if (!this.diagnoseConflicts()) {
                throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É FileManager –∏ GoogleDrive');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if (!this.isAuthorized()) {
                console.error('‚ùå FileManager: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ Google –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏.');
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
            let hasValidToken = false;
            if (window.authService && window.authService.isSignedIn()) {
                const token = window.authService.getAccessToken();
                if (token) {
                    hasValidToken = true;
                    console.log('‚úÖ FileManager: –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ AuthService');
                } else {
                    console.error('‚ùå FileManager: AuthService.isSignedIn() = true, –Ω–æ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                }
            } else {
                console.error('‚ùå FileManager: AuthService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }
            
            if (!hasValidToken) {
                throw new Error('–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
            }
            
            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è FileManager');
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ JSON —Ñ–∞–π–ª–æ–≤ –ø–æ –≤—Å–µ–º—É Google Drive
            console.log('üìÅ FileManager: –∑–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
                mimeType: 'application/json',
                folderOnly: false, // –ò—â–µ–º –ø–æ –≤—Å–µ–º—É Drive
                pageSize: options.pageSize || 50
            });
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ –æ–±—â–µ–π –ø–∞–ø–∫–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            console.log('üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–∏—Å–∫ –≤ –æ–±—â–µ–π –ø–∞–ø–∫–µ...');
            const config = window.config || globalThis.config;
            console.log('üìÅ ID –ø–∞–ø–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', config?.drive?.folderId);
            let result = await this.drive.getFiles({
                mimeType: 'application/json',
                folderOnly: true, // –ò—â–µ–º –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ
                filterByPrefix: true, // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
                pageSize: options.pageSize || 50
            });
            
            console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–ø–∫–µ:', result.success ? `–ù–∞–π–¥–µ–Ω–æ ${result.files.length} —Ñ–∞–π–ª–æ–≤` : `–û—à–∏–±–∫–∞: ${result.error}`);

            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ, –∏—â–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
            if (result.success && result.files.length === 0) {
                console.log('üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö JSON —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ...');
                result = await this.drive.getFiles({
                    mimeType: 'application/json',
                    folderOnly: true, // –ò—â–µ–º –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ
                    filterByPrefix: false, // –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
                    pageSize: options.pageSize || 50
                });
            }

            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –ø–æ –≤—Å–µ–º—É Google Drive
            if (result.success && result.files.length === 0) {
                console.log('üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É Google Drive...');
                result = await this.drive.getFiles({
                    mimeType: 'application/json',
                    folderOnly: false, // –ò—â–µ–º –ø–æ –≤—Å–µ–º—É Google Drive
                    filterByPrefix: true, // –° —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
                    pageSize: options.pageSize || 50
                });
                
                console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º—É Drive:', result.success ? `–ù–∞–π–¥–µ–Ω–æ ${result.files.length} —Ñ–∞–π–ª–æ–≤` : `–û—à–∏–±–∫–∞: ${result.error}`);
                
                // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                if (result.success && result.files.length > 0) {
                    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –≤—Å–µ–º—É Drive:');
                    result.files.forEach((file, index) => {
                        console.log(`  ${index + 1}. ${file.name}`);
                        console.log(`     - ID: ${file.id}`);
                        console.log(`     - –í–ª–∞–¥–µ–ª–µ—Ü: ${file.owners ? file.owners[0]?.displayName || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
                        console.log(`     - –û–±—â–∏–π –¥–æ—Å—Ç—É–ø: ${file.shared ? '–¥–∞' : '–Ω–µ—Ç'}`);
                        console.log(`     - –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞: ${file.parents ? file.parents.join(', ') : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
                        console.log(`     - –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä: ${file.lastModifyingUser ? file.lastModifyingUser.displayName || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
                        console.log(`     - –û–ø–∏—Å–∞–Ω–∏–µ: ${file.description || '–Ω–µ—Ç'}`);
                        console.log(`     - –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${file.webViewLink || '–Ω–µ—Ç'}`);
                        
                        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞
                        if (file.capabilities) {
                            console.log(`     - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:`);
                            console.log(`       - –ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å: ${file.capabilities.canRead || false}`);
                            console.log(`       - –ú–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: ${file.capabilities.canEdit || false}`);
                            console.log(`       - –ú–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å: ${file.capabilities.canDelete || false}`);
                            console.log(`       - –ú–æ–∂–µ—Ç –¥–µ–ª–∏—Ç—å—Å—è: ${file.capabilities.canShare || false}`);
                        }
                        
                        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö
                        if (file.permissions && file.permissions.length > 0) {
                            console.log(`     - –†–∞–∑—Ä–µ—à–µ–Ω–∏—è (${file.permissions.length}):`);
                            file.permissions.forEach((permission, permIndex) => {
                                console.log(`       ${permIndex + 1}. ${permission.role} - ${permission.type} (${permission.displayName || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})`);
                            });
                        }
                    });
                }
            }

            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö JSON —Ñ–∞–π–ª–æ–≤ –ø–æ –≤—Å–µ–º—É Google Drive
            if (result.success && result.files.length === 0) {
                console.log('üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö JSON —Ñ–∞–π–ª–æ–≤ –ø–æ –≤—Å–µ–º—É Google Drive...');
                result = await this.drive.getFiles({
                    mimeType: 'application/json',
                    folderOnly: false,
                    filterByPrefix: false,
                    pageSize: options.pageSize || 50
                });
            }

            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 5: –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ–±—â–∏–º –¥–æ—Å—Ç—É–ø–æ–º
            if (result.success && result.files.length === 0) {
                console.log('üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è 5: –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ–±—â–∏–º –¥–æ—Å—Ç—É–ø–æ–º...');
                result = await this.drive.getFiles({
                    mimeType: 'application/json',
                    folderOnly: false,
                    filterByPrefix: false,
                    includeShared: true, // –í–∫–ª—é—á–∞–µ–º –æ–±—â–∏–µ —Ñ–∞–π–ª—ã
                    pageSize: options.pageSize || 50
                });
            }

            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 6: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –ø–∞–ø–∫–µ –ø–æ ID
            if (result.success && result.files.length === 0) {
                console.log('üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è 6: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –ø–∞–ø–∫–µ –ø–æ ID...');
                try {
                    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–∞–ø–∫–∏
                    const folderResult = await this.drive.getFilesFromFolder();
                    if (folderResult.success && folderResult.files.length > 0) {
                        console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${folderResult.files.length} —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ`);
                        result = folderResult;
                    }
                } catch (error) {
                    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –ø–æ–∏—Å–∫–µ –≤ –ø–∞–ø–∫–µ:', error.message);
                }
            }

            if (!result.success) {
                throw new Error(result.error);
            }

            this.currentFiles = result.files;
            this.selectedFiles = [];
            
            console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.files.length}`);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
            if (result.files.length > 0) {
                console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö:');
                result.files.forEach((file, index) => {
                    console.log(`  ${index + 1}. ${file.name}`);
                    console.log(`     - ID: ${file.id}`);
                    console.log(`     - –†–∞–∑–º–µ—Ä: ${file.size ? this.formatFileSize(file.size) : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
                    console.log(`     - –í–ª–∞–¥–µ–ª–µ—Ü: ${file.owners ? file.owners[0]?.displayName || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
                    console.log(`     - –û–±—â–∏–π –¥–æ—Å—Ç—É–ø: ${file.shared ? '–¥–∞' : '–Ω–µ—Ç'}`);
                    console.log(`     - –ò–∑–º–µ–Ω–µ–Ω: ${file.modifiedTime ? new Date(file.modifiedTime).toLocaleString('ru-RU') : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
                });
            } else {
                console.log('‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
                console.log('   - –§–∞–π–ª—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
                console.log('   - –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º');
                console.log('   - –§–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –ø–∞–ø–∫–µ');
                console.log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏–º—è');
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.renderFileSelectorModal(result.files, options);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤:', error);
            this.drive.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: ' + error.message, 'error');
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
     */
    renderFileSelectorModal(files, options) {
        const modal = document.createElement('div');
        modal.id = 'file-selector-modal';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
        `;

        const filesHtml = files.map(file => {
            const isSelected = this.selectedFiles.includes(file.id);
            const fileSize = file.size ? this.formatFileSize(file.size) : '';
            const modifiedDate = new Date(file.modifiedTime).toLocaleDateString('ru-RU');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ –∏–º–µ–Ω–∏
            const isEvaluationFile = file.name.includes('ios-windrose-evaluation') || file.name.includes('evaluation');
            const fileTypeIndicator = isEvaluationFile ? 'üìä' : 'üìÑ';
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
            const ownerInfo = file.owners && file.owners[0] ? 
                `${file.owners[0].displayName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}` : 
                '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            
            
            return `
                <div class="file-item ${isSelected ? 'selected' : ''}" 
                     data-file-id="${file.id}"
                     onclick="fileManager.toggleFileSelection('${file.id}')">
                    <div class="file-icon">
                        ${fileTypeIndicator}
                    </div>
                    <div class="file-info">
                        <div class="file-name">${file.name}</div>
                        <div class="file-meta">
                            ${fileSize} ‚Ä¢ ${modifiedDate} ${isEvaluationFile ? '‚Ä¢ –§–∞–π–ª –æ—Ü–µ–Ω–∫–∏' : ''}
                            <br><small style="color: #666;">–í–ª–∞–¥–µ–ª–µ—Ü: ${ownerInfo} ${file.shared ? '‚Ä¢ –û–±—â–∏–π –¥–æ—Å—Ç—É–ø' : ''}</small>
                        </div>
                    </div>
                    <div class="file-actions">
                        <button class="btn-preview" 
                                onclick="event.stopPropagation(); fileManager.previewFile('${file.id}')"
                                title="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä">
                            üëÅÔ∏è
                        </button>
                        <button class="btn-load" 
                                onclick="event.stopPropagation(); fileManager.loadFile('${file.id}')"
                                title="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª">
                            üì•
                        </button>
                    </div>
                </div>
            `;
        }).join('');

        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –æ—Ü–µ–Ω–∫–∏</h3>
                    <p style="margin: 5px 0; color: #666; font-size: 14px;">–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω JSON —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>
                    <button class="btn-close" onclick="fileManager.closeFileSelector()">‚ùå</button>
                </div>
                
                <div class="modal-body">
                    ${files.length === 0 ? 
                        '<div class="empty-state">üì≠ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>' :
                        `<div class="files-list">${filesHtml}</div>`
                    }
                </div>
                
                <div class="modal-footer">
                    <div class="selected-info">
                        –í—ã–±—Ä–∞–Ω: <span id="selected-count">0</span> —Ñ–∞–π–ª
                    </div>
                    <div class="modal-actions">
                        <button class="btn-secondary" onclick="fileManager.closeFileSelector()">
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button class="btn-primary" 
                                onclick="fileManager.confirmSelection()"
                                disabled>
                            üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                        </button>
                    </div>
                </div>
            </div>
            
            <style>
                .modal-content {
                    background: white;
                    border-radius: 12px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                    max-width: 600px;
                    width: 90%;
                    max-height: 80vh;
                    display: flex;
                    flex-direction: column;
                }
                
                .modal-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 20px;
                    border-bottom: 1px solid #e2e8f0;
                }
                
                .modal-header h3 {
                    margin: 0;
                    color: #2d3748;
                }
                
                .btn-close {
                    background: none;
                    border: none;
                    font-size: 18px;
                    cursor: pointer;
                    padding: 5px;
                    border-radius: 4px;
                    transition: background 0.2s;
                }
                
                .btn-close:hover {
                    background: #f7fafc;
                }
                
                .modal-body {
                    flex: 1;
                    overflow-y: auto;
                    padding: 20px;
                }
                
                .files-list {
                    display: flex;
                    flex-direction: column;
                    gap: 10px;
                }
                
                .file-item {
                    display: flex;
                    align-items: center;
                    padding: 15px;
                    border: 2px solid #e2e8f0;
                    border-radius: 8px;
                    cursor: pointer;
                    transition: all 0.2s;
                    gap: 15px;
                }
                
                .file-item:hover {
                    border-color: #4299e1;
                    background: #f7fafc;
                }
                
                .file-item.selected {
                    border-color: #4299e1;
                    background: #ebf8ff;
                }
                
                .file-icon {
                    font-size: 24px;
                    width: 40px;
                    text-align: center;
                }
                
                .file-info {
                    flex: 1;
                }
                
                .file-name {
                    font-weight: 600;
                    color: #2d3748;
                    margin-bottom: 4px;
                }
                
                .file-meta {
                    font-size: 14px;
                    color: #718096;
                }
                
                .file-actions {
                    display: flex;
                    gap: 10px;
                }
                
                .btn-preview {
                    background: #4299e1;
                    color: white;
                    border: none;
                    padding: 8px 12px;
                    border-radius: 6px;
                    cursor: pointer;
                    font-size: 14px;
                    transition: background 0.2s;
                }
                
                .btn-preview:hover {
                    background: #3182ce;
                }
                
                .btn-load {
                    background: #48bb78;
                    color: white;
                    border: none;
                    padding: 8px 12px;
                    border-radius: 6px;
                    cursor: pointer;
                    font-size: 14px;
                    transition: background 0.2s;
                }
                
                .btn-load:hover {
                    background: #38a169;
                }
                
                .empty-state {
                    text-align: center;
                    padding: 40px;
                    color: #718096;
                    font-size: 16px;
                }
                
                .modal-footer {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 20px;
                    border-top: 1px solid #e2e8f0;
                }
                
                .selected-info {
                    color: #4a5568;
                    font-size: 14px;
                }
                
                .modal-actions {
                    display: flex;
                    gap: 10px;
                }
                
                .btn-secondary, .btn-primary {
                    padding: 10px 20px;
                    border-radius: 6px;
                    border: none;
                    cursor: pointer;
                    font-weight: 600;
                    transition: all 0.2s;
                }
                
                .btn-secondary {
                    background: #e2e8f0;
                    color: #4a5568;
                }
                
                .btn-secondary:hover {
                    background: #cbd5e0;
                }
                
                .btn-primary {
                    background: #4299e1;
                    color: white;
                }
                
                .btn-primary:hover:not(:disabled) {
                    background: #3182ce;
                }
                
                .btn-primary:disabled {
                    background: #a0aec0;
                    cursor: not-allowed;
                }
            </style>
        `;

        document.body.appendChild(modal);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        this.updateSelectedCount();
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª)
     */
    toggleFileSelection(fileId) {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä
        this.selectedFiles = [];
        
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        document.querySelectorAll('.file-item').forEach(item => {
            item.classList.remove('selected');
        });
        
        // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        this.selectedFiles.push(fileId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        const fileItem = document.querySelector(`[data-file-id="${fileId}"]`);
        if (fileItem) {
            fileItem.classList.add('selected');
        }
        
        this.updateSelectedCount();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    updateSelectedCount() {
        const countElement = document.getElementById('selected-count');
        const confirmButton = document.querySelector('.btn-primary');
        
        if (countElement) {
            countElement.textContent = this.selectedFiles.length;
        }
        
        if (confirmButton) {
            confirmButton.disabled = this.selectedFiles.length === 0;
        }
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
     */
    async confirmSelection() {
        if (this.selectedFiles.length === 0) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
            return;
        }
        
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (—Ç–∞–∫ –∫–∞–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω –≤—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
        const fileId = this.selectedFiles[0];
        console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:', fileId);
        
        try {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞
            this.closeFileSelector();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            await this.loadFile(fileId);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', error);
            this.drive.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message, 'error');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
     */
    async loadFile(fileId) {
        try {
            console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞:', fileId);
            
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
            const fileInfo = await this.drive.getFileInfo(fileId);
            if (fileInfo.success) {
                const fileSize = fileInfo.file.size;
                const config = window.config || globalThis.config;
                const maxSize = config?.drive?.maxFileSize;
                
                console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${this.formatFileSize(fileSize)}, –ú–∞–∫—Å–∏–º—É–º: ${this.formatFileSize(maxSize)}`);
                
                if (fileSize > maxSize) {
                    throw new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${this.formatFileSize(fileSize)}. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${this.formatFileSize(maxSize)}`);
                }
            }
            
            const result = await this.drive.downloadFile(fileId);
            if (!result.success) {
                throw new Error(result.error);
            }
            
            // –ü–∞—Ä—Å–∏–º JSON
            const data = JSON.parse(result.content);
            
            if (this.onFileLoaded) {
                this.onFileLoaded(data, fileId);
            }
            
            this.closeFileSelector();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
            this.drive.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message, 'error');
        }
    }

    /**
     * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞
     */
    async previewFile(fileId) {
        try {
            console.log('üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞:', fileId);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.drive.showNotification('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...', 'info');
            
            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            const result = await this.drive.downloadFile(fileId);
            
            // –ü–∞—Ä—Å–∏–º JSON
            const data = JSON.parse(result.content);
            console.log('üìÑ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:', data);
            console.log('üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ competencies:', data.competencies);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
            this.showPreviewModal(data, fileId);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
            this.drive.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ' + error.message, 'error');
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
     */
    showPreviewModal(data, fileId) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.id = 'preview-modal';
        modal.className = 'modal';
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const formattedJson = JSON.stringify(data, null, 2);
        
        modal.innerHTML = `
            <div class="modal-content" style="max-width: 800px; max-height: 80vh;">
                <div class="modal-header">
                    <h3>üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞</h3>
                    <button class="btn-close" onclick="fileManager.closePreviewModal()">‚ùå</button>
                </div>
                <div class="modal-body">
                    <div style="margin-bottom: 15px;">
                        <strong>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</strong> ${data.developer || '–ù–µ —É–∫–∞–∑–∞–Ω'}<br>
                        <strong>–î–∞—Ç–∞:</strong> ${data.date ? new Date(data.date).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}<br>
                        <strong>–°—Ç–∞—Ç—É—Å:</strong> ${data.status || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                    </div>
                    <div style="margin-bottom: 15px;">
                        <h4>–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:</h4>
                        <div id="competencies-preview" style="max-height: 300px; overflow-y: auto; background: #f8f9fa; padding: 10px; border-radius: 6px; font-family: monospace; font-size: 12px;">
                            ${this.formatCompetenciesForPreview(data.competencies)}
                        </div>
                    </div>
                    <details>
                        <summary style="cursor: pointer; font-weight: bold; margin-bottom: 10px;">üìÑ –ü–æ–ª–Ω—ã–π JSON</summary>
                        <pre style="background: #f8f9fa; padding: 15px; border-radius: 6px; overflow-x: auto; font-size: 11px; max-height: 300px; overflow-y: auto;">${formattedJson}</pre>
                    </details>
                </div>
                <div class="modal-footer">
                    <div></div>
                    <div class="modal-actions">
                        <button class="btn-secondary" onclick="fileManager.closePreviewModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
                        <button class="btn-primary" onclick="fileManager.loadFileFromPreview('${fileId}')">üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª</button>
                    </div>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const style = document.createElement('style');
        style.textContent = `
            .modal {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.5);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 10000;
            }
            
            .modal-content {
                background: white;
                border-radius: 12px;
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
                display: flex;
                flex-direction: column;
                max-width: 90vw;
                max-height: 90vh;
            }
            
            .modal-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 20px;
                border-bottom: 1px solid #e2e8f0;
            }
            
            .modal-header h3 {
                margin: 0;
                color: #2d3748;
            }
            
            .btn-close {
                background: none;
                border: none;
                font-size: 18px;
                cursor: pointer;
                padding: 5px;
                border-radius: 4px;
                transition: background 0.2s;
            }
            
            .btn-close:hover {
                background: #f7fafc;
            }
            
            .modal-body {
                flex: 1;
                overflow-y: auto;
                padding: 20px;
            }
            
            .modal-footer {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 20px;
                border-top: 1px solid #e2e8f0;
            }
            
            .modal-actions {
                display: flex;
                gap: 10px;
            }
            
            .btn-secondary, .btn-primary {
                padding: 10px 20px;
                border-radius: 6px;
                border: none;
                cursor: pointer;
                font-size: 14px;
                transition: background 0.2s;
            }
            
            .btn-secondary {
                background: #e2e8f0;
                color: #4a5568;
            }
            
            .btn-secondary:hover {
                background: #cbd5e0;
            }
            
            .btn-primary {
                background: #4299e1;
                color: white;
            }
            
            .btn-primary:hover {
                background: #3182ce;
            }
        `;
        
        document.head.appendChild(style);
        document.body.appendChild(modal);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    formatCompetenciesForPreview(competencies) {
        console.log('üîç formatCompetenciesForPreview –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ:', competencies);
        
        if (!competencies) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö';
        
        let html = '';
        Object.keys(competencies).forEach(compKey => {
            const comp = competencies[compKey];
            console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é ${compKey}:`, comp);
            
            html += `<div style="margin-bottom: 10px;"><strong>${comp.name || compKey}:</strong><br>`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            if (comp.levels) {
                console.log(`üîç –£ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ ${compKey} –µ—Å—Ç—å levels:`, comp.levels);
                Object.keys(comp.levels).forEach(levelKey => {
                    const level = comp.levels[levelKey];
                    console.log(`üîç –£—Ä–æ–≤–µ–Ω—å ${levelKey}:`, level);
                    html += `  ${levelKey}: —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞=${level.selfEvaluation || 0}, –º–µ–Ω–µ–¥–∂–µ—Ä=${level.managerEvaluation || 0}`;
                    if (level.comments) {
                        html += `, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏="${level.comments}"`;
                    }
                    html += '<br>';
                });
            } else {
                // –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ - –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
                console.log(`üîç –£ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ ${compKey} –Ω–µ—Ç levels, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:`, comp);
                Object.keys(comp).forEach(levelKey => {
                    if (levelKey !== 'name' && typeof comp[levelKey] === 'object') {
                        const level = comp[levelKey];
                        console.log(`üîç –ü—Ä—è–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ ${levelKey}:`, level);
                        html += `  ${levelKey}: —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞=${level.selfEvaluation || 0}, –º–µ–Ω–µ–¥–∂–µ—Ä=${level.managerEvaluation || 0}`;
                        if (level.comments) {
                            html += `, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏="${level.comments}"`;
                        }
                        html += '<br>';
                    }
                });
            }
            html += '</div>';
        });
        
        const result = html || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö';
        console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç formatCompetenciesForPreview:', result);
        return result;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    async loadFileFromPreview(fileId) {
        console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', fileId);
        this.closePreviewModal();
        await this.loadFile(fileId);
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    closePreviewModal() {
        const modal = document.getElementById('preview-modal');
        if (modal) {
            modal.remove();
        }
        
        // –£–¥–∞–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
        const style = document.querySelector('style');
        if (style && style.textContent.includes('.modal {')) {
            style.remove();
        }
    }


    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
     */
    closeFileSelector() {
        const modal = document.getElementById('file-selector-modal');
        if (modal) {
            modal.remove();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ñ–∞–π–ª–∞
     */
    getFileIcon(mimeType) {
        if (mimeType === 'application/json') {
            return 'üìÑ';
        } else if (mimeType.includes('text/')) {
            return 'üìù';
        } else if (mimeType.includes('image/')) {
            return 'üñºÔ∏è';
        } else if (mimeType.includes('video/')) {
            return 'üé•';
        } else if (mimeType.includes('audio/')) {
            return 'üéµ';
        } else {
            return 'üìé';
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
     */
    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FileManager;
} else {
    window.FileManager = FileManager;
}
