/**
 * UI Manager
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
 * –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
 */

class UIManager {
    constructor() {
        this.dataManager = null;
        this.chartManager = null;
        this.isInitialized = false;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI Manager
     */
    initialize() {
        if (this.isInitialized) {
            console.log('‚ö†Ô∏è UIManager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UIManager...');
        
        // –°–≤—è–∑—ã–≤–∞–µ–º—Å—è —Å DataManager
        this.dataManager = window.dataManager;
        
        if (!this.dataManager) {
            console.error('‚ùå DataManager –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:', Object.keys(window).filter(k => k.includes('Manager') || k.includes('data')));
            return;
        }
        
        console.log('‚úÖ DataManager –Ω–∞–π–¥–µ–Ω:', this.dataManager);
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.dataManager.onDataChanged = (data) => this.updateUI(data);
        this.dataManager.onDataLoaded = (data) => this.onDataLoaded(data);
        
        console.log('‚úÖ UIManager —Å–≤—è–∑–∞–Ω —Å DataManager');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.initializeEventHandlers();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Chart Manager
        this.initializeChartManager();
        
        this.isInitialized = true;
        console.log('‚úÖ UIManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    initializeEventHandlers() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        document.addEventListener('input', (event) => {
            if (event.target.classList.contains('evaluation-input')) {
                this.handleInputChange(event.target);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        const developerSelect = document.getElementById('developer-profile');
        if (developerSelect) {
            developerSelect.addEventListener('change', (event) => {
                this.handleDeveloperChange(event.target.value);
            });
        }
        
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Chart Manager
     */
    initializeChartManager() {
        if (typeof ChartManager !== 'undefined') {
            this.chartManager = new ChartManager();
            console.log('‚úÖ ChartManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.log('‚ö†Ô∏è ChartManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
     */
    handleInputChange(input) {
        const competencyKey = input.dataset.competency;
        const levelKey = input.dataset.level;
        const type = input.dataset.type;
        
        if (!competencyKey || !levelKey || !type) {
            console.warn('‚ö†Ô∏è –ü–æ–ª–µ –≤–≤–æ–¥–∞ –±–µ–∑ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤:', input);
            return;
        }
        
        const value = input.value;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        this.dataManager.updateEvaluation(competencyKey, levelKey, type, value);
        
        console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ ${competencyKey}.${levelKey}.${type}:`, value);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
     */
    handleDeveloperChange(developerKey) {
        if (!developerKey) {
            console.log('‚ö†Ô∏è –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω');
            return;
        }
        
        console.log('üë§ –ò–∑–º–µ–Ω–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:', developerKey);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        this.dataManager.createNewData(developerKey);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateDeveloperInfo(developerKey);
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ UI
     */
    loadDataIntoUI(data) {
        console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ UI:', data);
        console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', {
            developer: data.developer,
            competencies: Object.keys(data.competencies || {}),
            hasCompetencies: !!data.competencies
        });
        
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
            const developerSelect = document.getElementById('developer-profile');
            if (developerSelect && data.developer) {
                developerSelect.value = data.developer;
                this.updateDeveloperInfo(data.developer);
                console.log('‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', data.developer);
            } else {
                console.warn('‚ö†Ô∏è –°–µ–ª–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª—è
            this.loadEvaluationsIntoFields(data);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
            this.updateCharts(data);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.updateStatistics();
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ UI (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞)
            if (typeof updateButtons === 'function') {
                updateButtons();
                console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞)
            if (typeof calculateProgress === 'function') {
                calculateProgress();
                console.log('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω');
            }
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ UI');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ UI:', error);
            throw error;
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ü–µ–Ω–æ–∫ –≤ –ø–æ–ª—è –≤–≤–æ–¥–∞
     */
    loadEvaluationsIntoFields(data) {
        if (!data.competencies) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
            return;
        }
        
        console.log('üìù –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ—Ü–µ–Ω–æ–∫ –≤ –ø–æ–ª—è...');
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ
        const allInputs = document.querySelectorAll('.evaluation-input');
        console.log(`üîç –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π —Å –∫–ª–∞—Å—Å–æ–º 'evaluation-input': ${allInputs.length}`);
        
        const selfInputs = document.querySelectorAll('.evaluation-input[data-type="self"]');
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏: ${selfInputs.length}`);
        
        const managerInputs = document.querySelectorAll('.evaluation-input[data-type="manager"]');
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –æ—Ü–µ–Ω–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${managerInputs.length}`);
        
        const commentsInputs = document.querySelectorAll('.evaluation-input[data-type="comments"]');
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${commentsInputs.length}`);
        
        let loadedCount = 0;
        
        Object.keys(data.competencies).forEach(compKey => {
            const comp = data.competencies[compKey];
            console.log(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é ${compKey}:`, comp);
            
            if (comp.levels) {
                Object.keys(comp.levels).forEach(levelKey => {
                    const level = comp.levels[levelKey];
                    console.log(`  üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å ${levelKey}:`, level);
                    
                    // –°–∞–º–æ–æ—Ü–µ–Ω–∫–∞
                    const selfInput = this.findInput(compKey, levelKey, 'self');
                    if (selfInput) {
                        selfInput.value = level.selfEvaluation || 0;
                        console.log(`    ‚úÖ –°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${level.selfEvaluation}`);
                        loadedCount++;
                    } else {
                        console.warn(`    ‚ö†Ô∏è –ü–æ–ª–µ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${compKey}.${levelKey}.self`);
                    }
                    
                    // –û—Ü–µ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                    const managerInput = this.findInput(compKey, levelKey, 'manager');
                    if (managerInput) {
                        managerInput.value = level.managerEvaluation || 0;
                        console.log(`    ‚úÖ –û—Ü–µ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${level.managerEvaluation}`);
                        loadedCount++;
                    } else {
                        console.warn(`    ‚ö†Ô∏è –ü–æ–ª–µ –æ—Ü–µ–Ω–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${compKey}.${levelKey}.manager`);
                    }
                    
                    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    const commentsInput = this.findInput(compKey, levelKey, 'comments');
                    if (commentsInput) {
                        commentsInput.value = level.comments || '';
                        console.log(`    ‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: "${level.comments}"`);
                        loadedCount++;
                    } else {
                        console.warn(`    ‚ö†Ô∏è –ü–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${compKey}.${levelKey}.comments`);
                    }
                });
            }
        });
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${loadedCount} –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø–æ–ª—è –≤–≤–æ–¥–∞`);
        
        if (loadedCount === 0) {
            console.error('‚ùå –ù–∏ –æ–¥–Ω–æ –ø–æ–ª–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML –∏ data-–∞—Ç—Ä–∏–±—É—Ç—ã');
        }
    }
    
    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º
     */
    findInput(competencyKey, levelKey, type) {
        // –ò—â–µ–º –ø–æ data-–∞—Ç—Ä–∏–±—É—Ç–∞–º
        const selector = `.evaluation-input[data-competency="${competencyKey}"][data-level="${levelKey}"][data-type="${type}"]`;
        console.log(`üîç –ò—â–µ–º –ø–æ–ª–µ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
        
        const input = document.querySelector(selector);
        
        if (input) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${competencyKey}.${levelKey}.${type}`, input);
            return input;
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        const allInputs = document.querySelectorAll('.evaluation-input');
        console.log(`üîç –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π —Å –∫–ª–∞—Å—Å–æ–º 'evaluation-input': ${allInputs.length}`);
        
        const competencyInputs = document.querySelectorAll(`[data-competency="${competencyKey}"]`);
        console.log(`üîç –ü–æ–ª–µ–π —Å data-competency="${competencyKey}": ${competencyInputs.length}`);
        
        const levelInputs = document.querySelectorAll(`[data-level="${levelKey}"]`);
        console.log(`üîç –ü–æ–ª–µ–π —Å data-level="${levelKey}": ${levelInputs.length}`);
        
        const typeInputs = document.querySelectorAll(`[data-type="${type}"]`);
        console.log(`üîç –ü–æ–ª–µ–π —Å data-type="${type}": ${typeInputs.length}`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª–µ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
        const partialInputs = document.querySelectorAll(`[data-competency*="${competencyKey}"], [data-level*="${levelKey}"], [data-type*="${type}"]`);
        console.log(`üîç –ü–æ–ª–µ–π —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º: ${partialInputs.length}`);
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
        if (allInputs.length === 0) {
            console.warn(`‚ö†Ô∏è –ü–æ–ª—è –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É.`);
        }
        
        console.warn(`‚ö†Ô∏è –ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${competencyKey}.${levelKey}.${type}`);
        return null;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ
     */
    updateDeveloperInfo(developerKey) {
        const developerName = this.dataManager.getDeveloperName(developerKey);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        const currentDeveloperEl = document.getElementById('current-developer');
        if (currentDeveloperEl) {
            currentDeveloperEl.textContent = developerName;
        }
        
        console.log(`üë§ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ: ${developerName}`);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    updateUI(data) {
        if (!data) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
        this.updateCharts(data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updateStatistics();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ü–µ–Ω–∫–µ
        this.updateEvaluationInfo(data);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º
     */
    updateCharts(data) {
        console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã...', data);
        
        if (this.chartManager && this.chartManager.updateCharts) {
            try {
                this.chartManager.updateCharts(data);
                console.log('üìä –î–∏–∞–≥—Ä–∞–º–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ ChartManager');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º —á–µ—Ä–µ–∑ ChartManager:', error);
                // Fallback –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                this.updateChartsFallback();
            }
        } else {
            // –ï—Å–ª–∏ ChartManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            this.updateChartsFallback();
        }
    }
    
    updateChartsFallback() {
        if (typeof calculateProgress === 'function') {
            console.log('üìä –í—ã–∑—ã–≤–∞–µ–º calculateProgress()...');
            calculateProgress();
            console.log('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é calculateProgress');
        } else {
            console.warn('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è calculateProgress –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatistics() {
        const stats = this.dataManager.getStatistics();
        
        if (!stats) {
            console.log('‚ö†Ô∏è –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsElements = {
            'total-evaluations': stats.totalEvaluations,
            'completed-evaluations': stats.completedEvaluations,
            'completion-percentage': Math.round(stats.completionPercentage),
            'average-score': stats.averageScore
        };
        
        Object.keys(statsElements).forEach(elementId => {
            const element = document.getElementById(elementId);
            if (element) {
                element.textContent = statsElements[elementId];
            }
        });
        
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', stats);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ü–µ–Ω–∫–µ
     */
    updateEvaluationInfo(data) {
        const evaluationDate = document.getElementById('evaluation-date');
        const evaluationStatus = document.getElementById('evaluation-status');
        
        if (evaluationDate && data.date) {
            evaluationDate.textContent = new Date(data.date).toLocaleDateString('ru-RU');
        }
        
        if (evaluationStatus) {
            const stats = this.dataManager.getStatistics();
            if (stats) {
                evaluationStatus.textContent = `–ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${Math.round(stats.completionPercentage)}%`;
            }
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    onDataLoaded(data) {
        console.log('üì• onDataLoaded –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
        console.log('üì• –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º UI...', data);
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ UI
            console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º loadDataIntoUI...');
            this.loadDataIntoUI(data);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!', 'success');
            
            console.log('‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI: ' + error.message, 'error');
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'info') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (typeof showNotification === 'function') {
            showNotification(message, type);
        } else {
            console.log(`üîî ${type.toUpperCase()}: ${message}`);
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ UI
     */
    clearUI() {
        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        const inputs = document.querySelectorAll('.evaluation-input');
        inputs.forEach(input => {
            input.value = '';
        });
        
        // –û—á–∏—â–∞–µ–º —Å–µ–ª–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        const developerSelect = document.getElementById('developer-profile');
        if (developerSelect) {
            developerSelect.value = '';
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const statsElements = ['total-evaluations', 'completed-evaluations', 'completion-percentage', 'average-score'];
        statsElements.forEach(elementId => {
            const element = document.getElementById(elementId);
            if (element) {
                element.textContent = '0';
            }
        });
        
        console.log('üóëÔ∏è UI –æ—á–∏—â–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.uiManager = new UIManager();
