/**
 * Google Drive API Operations Module
 * 
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞:
 * 1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Google Drive API –≤–∫–ª—é—á–µ–Ω –≤ Google Cloud Console
 * 2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config.js
 * 3. –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
 */

class GoogleDrive {
    constructor(config, auth) {
        this.auth = auth;
        this.folderId = config.folderId;
        this.folderUrl = config.folderUrl;
        this.filePrefix = config.filePrefix || 'evaluation';
        
        // Callbacks
        this.onFilesLoaded = null;
        this.onFileUploaded = null;
        this.onError = null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
     */
    async getAccessToken() {
        try {
            console.log('üîç –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞...');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ AuthService
            if (window.authService && window.authService.isSignedIn()) {
                const token = window.authService.getAccessToken();
                if (token) {
                    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ AuthService');
                    return token;
                } else {
                    console.log('‚ö†Ô∏è AuthService.isSignedIn() = true, –Ω–æ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                }
            } else {
                console.log('‚ö†Ô∏è AuthService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }
            
            // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ auth (–º–æ–∂–µ—Ç –±—ã—Ç—å AuthService)
            if (this.auth) {
                if (this.auth.isSignedIn && typeof this.auth.isSignedIn === 'function') {
                    // –≠—Ç–æ AuthService
                    if (this.auth.isSignedIn()) {
                        const token = this.auth.getAccessToken();
                        if (token) {
                            console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ AuthService');
                            return token;
                        }
                    }
                } else if (this.auth.accessToken) {
                    // –≠—Ç–æ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç auth
                    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ auth (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)');
                    return this.auth.accessToken;
                }
            }
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            if (window.authService && window.authService.isSignedIn()) {
                console.log('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω...');
                
                try {
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Google Identity Services
                    const tokenClient = window.google.accounts.oauth2.initTokenClient({
                        client_id: window.authService.auth.clientId,
                        scope: 'https://www.googleapis.com/auth/drive.file',
                        callback: (response) => {
                            if (response.access_token) {
                                console.log('‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Google Identity Services');
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ AuthService
                                if (window.authService.auth) {
                                    window.authService.auth.accessToken = response.access_token;
                                    window.authService.auth.saveAuthState();
                                }
                                return response.access_token;
                            }
                        }
                    });
                    
                    tokenClient.requestAccessToken();
                    
                    // –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
                    return new Promise((resolve, reject) => {
                        const timeout = setTimeout(() => {
                            reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞'));
                        }, 10000);
                        
                        const checkToken = () => {
                            if (window.authService.auth && window.authService.auth.accessToken) {
                                clearTimeout(timeout);
                                resolve(window.authService.auth.accessToken);
                            } else {
                                setTimeout(checkToken, 100);
                            }
                        };
                        checkToken();
                    });
                    
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:', error);
                }
            }
            
            console.error('‚ùå –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ instructions.html');
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ Google Drive
     */
    async getFiles(options = {}) {
        try {
            console.log('üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...');
            this.showLoadingIndicator('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...');

            const accessToken = await this.getAccessToken();
            
            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            const params = new URLSearchParams({
                pageSize: options.pageSize || 100,
                fields: 'files(id,name,mimeType,createdTime,modifiedTime,size,iconLink)',
                orderBy: 'modifiedTime desc'
            });

            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–∞–ø–∫–∞, –∏—â–µ–º —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –≤ –Ω–µ–π
            console.log('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤:', {
                folderId: this.folderId,
                folderOnly: options.folderOnly,
                mimeType: options.mimeType
            });
            
            if (this.folderId && options.folderOnly !== false) {
                const query = `'${this.folderId}' in parents`;
                params.append('q', query);
                console.log('üìÅ –ü–æ–∏—Å–∫ –≤ –ø–∞–ø–∫–µ:', query);
            } else {
                console.log('üåê –ü–æ–∏—Å–∫ –≤–æ –≤—Å–µ–º Drive (folderOnly = false –∏–ª–∏ folderId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)');
            }

            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–∏–ø —Ñ–∞–π–ª–æ–≤
            if (options.mimeType) {
                const q = params.get('q') || '';
                params.set('q', q ? `${q} and mimeType='${options.mimeType}'` : `mimeType='${options.mimeType}'`);
            }

            const response = await fetch(`https://www.googleapis.com/drive/v3/files?${params}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${accessToken}`,
                    'Accept': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: ${response.status} ${response.statusText}`);
            }

            const data = await response.json();
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${data.files.length}`);
            
            this.hideLoadingIndicator();
            
            if (this.onFilesLoaded) {
                this.onFilesLoaded(data.files);
            }

            return { success: true, files: data.files };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', error);
            this.hideLoadingIndicator();
            this.handleError(error);
            return { success: false, error: error.message };
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Google Drive
     */
    async uploadFile(fileContent, filename, options = {}) {
        try {
            console.log('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞:', filename);
            this.showLoadingIndicator('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...');

            const accessToken = await this.getAccessToken();
            
            // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
            const metadata = {
                name: filename,
                parents: options.parents || (this.folderId ? [this.folderId] : [])
            };

            // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è multipart upload
            const form = new FormData();
            form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
            form.append('file', new Blob([fileContent], { type: 'application/json' }));

            const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${accessToken}`
                },
                body: form
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${response.status} ${response.statusText}`);
            }

            const result = await response.json();
            console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', result.id);
            
            this.hideLoadingIndicator();
            
            if (this.onFileUploaded) {
                this.onFileUploaded(result);
            }

            return { success: true, fileId: result.id, filename: filename };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
            this.hideLoadingIndicator();
            this.handleError(error);
            return { success: false, error: error.message };
        }
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Google Drive
     */
    async downloadFile(fileId) {
        try {
            console.log('üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:', fileId);
            this.showLoadingIndicator('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...');

            const accessToken = await this.getAccessToken();

            const response = await fetch(`https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${accessToken}`,
                    'Accept': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: ${response.status} ${response.statusText}`);
            }

            const content = await response.text();
            console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω');
            
            this.hideLoadingIndicator();
            
            return { success: true, content: content };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
            this.hideLoadingIndicator();
            this.handleError(error);
            return { success: false, error: error.message };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
     */
    async getFileInfo(fileId) {
        try {
            const accessToken = await this.getAccessToken();

            const response = await fetch(`https://www.googleapis.com/drive/v3/files/${fileId}?fields=id,name,mimeType,createdTime,modifiedTime,size`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${accessToken}`,
                    'Accept': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: ${response.status} ${response.statusText}`);
            }

            const fileInfo = await response.json();
            return { success: true, file: fileInfo };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ:', error);
            this.handleError(error);
            return { success: false, error: error.message };
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
     */
    async createFolder(name, parentId = null) {
        try {
            console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏:', name);

            const accessToken = await this.getAccessToken();
            
            const metadata = {
                name: name,
                mimeType: 'application/vnd.google-apps.folder',
                parents: parentId ? [parentId] : (this.folderId ? [this.folderId] : [])
            };

            const response = await fetch('https://www.googleapis.com/drive/v3/files', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${accessToken}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(metadata)
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: ${response.status} ${response.statusText}`);
            }

            const result = await response.json();
            console.log('‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', result.id);
            
            return { success: true, folderId: result.id };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏:', error);
            this.handleError(error);
            return { success: false, error: error.message };
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
     */
    async deleteFile(fileId) {
        try {
            console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:', fileId);

            const accessToken = await this.getAccessToken();

            const response = await fetch(`https://www.googleapis.com/drive/v3/files/${fileId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${accessToken}`
                }
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${response.status} ${response.statusText}`);
            }

            console.log('‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω');
            return { success: true };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
            this.handleError(error);
            return { success: false, error: error.message };
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoadingIndicator(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
        let loader = document.getElementById('drive-loader');
        if (!loader) {
            loader = document.createElement('div');
            loader.id = 'drive-loader';
            loader.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.5);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 10000;
            `;
            
            loader.innerHTML = `
                <div style="background: white; padding: 30px; border-radius: 12px; text-align: center; box-shadow: 0 10px 30px rgba(0,0,0,0.3);">
                    <div style="width: 40px; height: 40px; border: 4px solid #f3f3f3; border-top: 4px solid #4285f4; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 20px;"></div>
                    <p style="margin: 0; color: #333; font-size: 16px;">${message}</p>
                </div>
            `;
            
            document.body.appendChild(loader);
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideLoadingIndicator() {
        const loader = document.getElementById('drive-loader');
        if (loader) {
            loader.remove();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
     */
    handleError(error) {
        let message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';
        
        if (error.message.includes('401')) {
            message = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ Google —Å–Ω–æ–≤–∞';
        } else if (error.message.includes('403')) {
            message = '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º';
        } else if (error.message.includes('404')) {
            message = '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω';
        } else {
            message = error.message || message;
        }

        if (this.onError) {
            this.onError(message);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            z-index: 10001;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: 400px;
        `;

        const colors = {
            success: 'linear-gradient(135deg, #48bb78, #38a169)',
            error: 'linear-gradient(135deg, #f56565, #e53e3e)',
            warning: 'linear-gradient(135deg, #ed8936, #dd6b20)',
            info: 'linear-gradient(135deg, #4299e1, #3182ce)'
        };

        notification.style.background = colors[type] || colors.info;
        notification.textContent = message;
        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);

        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 4000);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GoogleDrive;
} else {
    window.GoogleDrive = GoogleDrive;
}
