name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: github-pages
    permissions:
      contents: read
      pages: write
      id-token: write
    env:
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Test Environment Variables
      run: |
        echo "=== ПРОВЕРКА ПЕРЕМЕННЫХ ОКРУЖЕНИЯ ==="
        echo "CLIENT_ID: ${{ env.CLIENT_ID }}"
        echo "CLIENT_SECRET: ${{ env.CLIENT_SECRET }}"
        echo "PROJECT_ID: ${{ env.PROJECT_ID }}"
        echo "=== ПРОВЕРКА SECRETS ==="
        echo "CLIENT_ID from secrets: ${{ secrets.CLIENT_ID }}"
        echo "CLIENT_SECRET from secrets: ${{ secrets.CLIENT_SECRET }}"
        echo "PROJECT_ID from secrets: ${{ secrets.PROJECT_ID }}"
        echo "=== ПРОВЕРКА ВСЕХ ENV ==="
        env | grep -i client || echo "No CLIENT variables found"
        env | grep -i project || echo "No PROJECT variables found"
        
    - name: Inject Environment Variables
      run: |
        echo "Встраиваем переменные окружения в evaluation.html..."
        echo "CLIENT_ID: ${{ env.CLIENT_ID }}"
        echo "CLIENT_SECRET: ${{ env.CLIENT_SECRET }}"
        echo "PROJECT_ID: ${{ env.PROJECT_ID }}"
        
        # Создаем копию файла для безопасности
        cp evaluation.html evaluation.html.backup
        
        # Заменяем плейсхолдеры на реальные значения
        # Используем более надежный метод с экранированием
        CLIENT_ID_ESCAPED=$(echo '${{ env.CLIENT_ID }}' | sed 's/[[\.*^$()+?{|]/\\&/g')
        CLIENT_SECRET_ESCAPED=$(echo '${{ env.CLIENT_SECRET }}' | sed 's/[[\.*^$()+?{|]/\\&/g')
        PROJECT_ID_ESCAPED=$(echo '${{ env.PROJECT_ID }}' | sed 's/[[\.*^$()+?{|]/\\&/g')
        
        echo "Экранированные значения:"
        echo "CLIENT_ID_ESCAPED: $CLIENT_ID_ESCAPED"
        echo "CLIENT_SECRET_ESCAPED: $CLIENT_SECRET_ESCAPED"
        echo "PROJECT_ID_ESCAPED: $PROJECT_ID_ESCAPED"
        
        # Выполняем замену
        sed -i "s/PLACEHOLDER_CLIENT_ID/$CLIENT_ID_ESCAPED/g" evaluation.html
        sed -i "s/PLACEHOLDER_CLIENT_SECRET/$CLIENT_SECRET_ESCAPED/g" evaluation.html
        sed -i "s/PLACEHOLDER_PROJECT_ID/$PROJECT_ID_ESCAPED/g" evaluation.html
        
        echo "Проверяем результат:"
        grep -A 2 -B 2 "CLIENT_ID" evaluation.html
        
    - name: Verify Files Before Upload
      run: |
        echo "Содержимое папки перед загрузкой:"
        ls -la
        echo "Проверяем содержимое evaluation.html:"
        grep -A 3 -B 1 "env-vars.js" evaluation.html || echo "env-vars.js не найден в evaluation.html"
        echo "Проверяем env-config.js:"
        if [ -f "env-config.js" ]; then
          echo "✅ env-config.js найден"
          echo "Размер файла: $(wc -c < env-config.js) байт"
          echo "Права доступа: $(ls -la env-config.js)"
        else
          echo "❌ env-config.js НЕ найден!"
        fi
        
        # Дополнительная проверка - создаем тестовый файл
        echo "Создаем тестовый файл для проверки:"
        echo "test content" > test-file.txt
        ls -la test-file.txt
        
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Verify Deployment
      run: |
        echo "Деплой завершен. Переменные встроены в evaluation.html:"
        echo "evaluation.html: https://aaguseynov.github.io/ios-windrose-matrix/evaluation.html"
        echo "Проверьте работу Google Drive API на странице!"
